// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  username      String       @unique
  password      String
  profilePic    String?
  following     Follows[]    @relation("following")
  followedBy    Follows[]    @relation("followedBy")
  posts         Posts[]
  comments      Comments[]
  likes         Likes[]
  followReqTo   FollowReqs[] @relation("followReqTo")
  followReqFrom FollowReqs[] @relation("followReqFrom")
}

model Follows {
  following          User   @relation("following", fields: [followingUsername], references: [username], onDelete: Cascade)
  followingUsername  String
  followedBy         User   @relation("followedBy", fields: [followedByUsername], references: [username], onDelete: Cascade)
  followedByUsername String

  @@id([followingUsername, followedByUsername])
}

model Posts {
  id             Int        @id @default(autoincrement())
  text           String?
  image          String?
  showComments   Boolean    @default(false)
  comments       Comments[]
  likes          Likes[]
  author         User       @relation(fields: [authorUsername], references: [username], onDelete: Cascade)
  authorUsername String
}

model Comments {
  id                  Int    @id @default(autoincrement())
  text                String
  post                Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId              Int
  commentedBy         User   @relation(fields: [commentedByUsername], references: [username], onDelete: Cascade)
  commentedByUsername String
}

model Likes {
  postLiked       Posts  @relation(fields: [postLikedId], references: [id], onDelete: Cascade)
  postLikedId     Int
  likedBy         User   @relation(fields: [likedByUsername], references: [username], onDelete: Cascade)
  likedByUsername String

  @@id([postLikedId, likedByUsername])
}

model FollowReqs {
  followReqTo           User   @relation("followReqTo", fields: [followReqToUsername], references: [username], onDelete: Cascade)
  followReqToUsername   String
  followReqFrom         User   @relation("followReqFrom", fields: [followReqFromUsername], references: [username], onDelete: Cascade)
  followReqFromUsername String

  @@id([followReqToUsername, followReqFromUsername])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
